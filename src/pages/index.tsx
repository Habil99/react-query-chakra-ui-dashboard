import Head from 'next/head'
import styles from '@/styles/Home.module.css'
import PageHeader from "@/components/shared/PageHeader";
import {
    Avatar,
    Drawer,
    DrawerBody,
    DrawerCloseButton,
    DrawerContent,
    DrawerFooter,
    DrawerHeader,
    DrawerOverlay,
    VStack
} from "@chakra-ui/react";
import ActionTable from "@/components/shared/ActionTable";
import { TableColumnsRecord } from "@/lib/models/table";
import { Citizen, CitizenCreateValues } from "@/lib/models/citizen";
import useCitizenList from "@/hooks/useCitizenList";
import { useState } from "react";
import DateFormatter from "@/lib/helpers/date-formatter";
import { Button } from "@chakra-ui/button";
import { Form, Formik } from "formik";
import CustomFormGroup from "@/components/shared/CustomFormGroup";
import * as Yup from "yup";
import useCitizenMutation from "@/hooks/useCitizenMutation";
import { InputType } from "@/lib/enums/form";
import toast, { Toaster } from "react-hot-toast";

const columns: TableColumnsRecord<Citizen>[] = [
    {
        key: "id",  // This is the key of the data record
        title: "ID", // This will be shown in the table header
        dataIndex: "id",
    },
    {
        key: "name",
        title: "User",
        dataIndex: "name",
        render: (name: string, record: Citizen) => (
            <div className={styles.user}>
                <Avatar name={name} src={record.photo} size="sm"/>
                <span>{name}</span>
            </div>
        )
    },
    {
        key: "email",  // This is the key of the data record
        title: "Email", // This will be shown in the table header
        dataIndex: "email",
    },
    {
        key: "phone",
        title: "Phone",
        dataIndex: "phone"
    },
    {
        key: "pin",
        title: "PIN",
        dataIndex: "pin"
    },
    {
        key: "date",
        title: "Date",
        dataIndex: "date",
        render: (date: string) => DateFormatter.format(date)
    },
    {
        key: "address",
        title: "Address",
        dataIndex: "address"
    },
    {
        key: "status",
        title: "Status",
        dataIndex: "status"
    }
]

const statusOptions = [
    {
        value: "Normal",
        label: "Normal"
    },
    {
        value: "Blocked",
        label: "Blocked"
    },
    {
        value: "Deleted",
        label: "Deleted"
    },
]

const initialValues: CitizenCreateValues = {
    name: "Habil",
    email: "habil@gmail.com",
    phone: "+994514490838",
    pin: "77uwoq2",
    date: new Date(),
    address: "Baku, Azerbaijan",
    status: "Normal",
    photo: "",
}

const createCitizenValidationSchema = Yup.object({
    name: Yup.string().min(4).required("Name is required"),
    email: Yup.string().email("Invalid email").required("Email is required"),
    phone: Yup.string().matches(/^(\+994)(50|51|55|70|77)(\d{3})(\d{2})(\d{2})$/).required("Phone is not valid"),
    pin: Yup.string().required("PIN is required"),
    date: Yup.date().default(() => new Date()).required("Date is required"),
    address: Yup.string().required("Address is required"),
    status: Yup.string().required("Status is required"),
    // photo: Yup.string().required("Photo is required"),
})

export default function Home() {
    const [page, setPage] = useState<number>(1);
    const [limit, setLimit] = useState<number>(10);
    const [drawerIsOpen, setDrawerIsOpen] = useState<boolean>(false);

    const closeDrawer = () => setDrawerIsOpen(false);

    const openDrawer = () => setDrawerIsOpen(true);

    const { data, isLoading } = useCitizenList({ page, limit });
    const { mutate: createCitizen, isLoading: citizenCreating } = useCitizenMutation({
        onSuccess: (citizen) => {
            toast("Citizen created successfully", {
                icon: "👏",
                style: {
                    borderRadius: "10px",
                    background: "#333",
                    color: "#fff",
                    fontFamily: "Poppins",
                }
            })
            closeDrawer();
        }
    })

    const submitCreateCitizen = (values: CitizenCreateValues) => {
        createCitizen(values);
    }

    const validateCreateCitizenForm = (values: CitizenCreateValues) => {

    }

    const createCitizenFormikConfig = {
        initialValues,
        onSubmit: submitCreateCitizen,
        validateOnChange: true,
        validate: validateCreateCitizenForm,
        validationSchema: createCitizenValidationSchema
    }

    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app"/>
                <meta name="viewport" content="width=device-width, initial-scale=1"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>
            <main className={styles.main}>
                <Toaster />
                <PageHeader
                    title="Citizens"
                    buttonLabel="Add citizen"
                    onButtonClick={openDrawer}
                />
                <ActionTable data={data} columns={columns} isLoading={isLoading}/>
                <Drawer placement="right" size="lg" isOpen={drawerIsOpen} onClose={closeDrawer}>
                    <DrawerOverlay/>
                    <DrawerContent bgColor="gray.900">
                        <DrawerCloseButton color="gray.200" bgColor="gray.800"/>
                        <DrawerHeader color="gray.200">Create a citizen</DrawerHeader>
                        <DrawerBody>
                            <Formik
                                {...createCitizenFormikConfig}
                            >
                                {({ handleSubmit }) => (
                                    <Form onSubmit={handleSubmit} id="createCitizenForm">
                                        <VStack spacing={4}>
                                            <CustomFormGroup name="name" label="Name"/>
                                            <CustomFormGroup name="phone" label="Phone"/>
                                            <CustomFormGroup name="email" label="Email"/>
                                            <CustomFormGroup name="pin" label="PIN"/>
                                            <CustomFormGroup name="address" label="Address"/>
                                            <CustomFormGroup name="date" label="Date" type={InputType.date}/>
                                            <CustomFormGroup
                                                name="status"
                                                label="Status"
                                                type={InputType.select}
                                                options={statusOptions}
                                            />
                                        </VStack>
                                    </Form>
                                )}
                            </Formik>
                        </DrawerBody>
                        <DrawerFooter borderTopWidth={1}>
                            <Button
                                variant="outline"
                                color="gray.200"
                                _hover={{ bg: "fg" }} mr={3}
                                onClick={closeDrawer}
                            >
                                Cancel
                            </Button>
                            <Button
                                colorScheme="blue"
                                type="submit"
                                form="createCitizenForm"
                                isLoading={citizenCreating}
                            >
                                Save
                            </Button>
                        </DrawerFooter>
                    </DrawerContent>
                </Drawer>
            </main>
        </>
    )
}
